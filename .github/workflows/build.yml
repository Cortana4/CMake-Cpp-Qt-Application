name: CI Build

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # windows
          - os: windows-latest
            preset: windows-x64-debug
            path: x64/Debug

          #- os: windows-latest
          #  preset: windows-x64-release
          #  path: bin/x64/Release
          #
          #- os: windows-latest
          #  preset: windows-x86-debug
          #  path: bin/x86/Debug
          #
          #- os: windows-latest
          #  preset: windows-x86-release
          #  path: bin/x86/Release

          # linux
          - os: ubuntu-latest
            preset: linux-x64-debug
            path: x64/Debug

          #- os: ubuntu-latest
          #  preset: linux-x64-release
          #  path: bin/x64/Release
          #
          #- os: ubuntu-latest
          #  preset: linux-x86-debug
          #  path: bin/x86/Debug
          #
          #- os: ubuntu-latest
          #  preset: linux-x86-release
          #  path: bin/x86/Release

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false

    - name: Install Build Dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install -y `
        ninja

    - name: Install Build Dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get install -y software-properties-common
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt-get install -y g++-13
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-13 100
        sudo apt-get install -y \
        ninja-build \
        libxi-dev \
        libxtst-dev \
        '^libxcb.*-dev' \
        libx11-xcb-dev \
        libgl1-mesa-dev \
        libxrender-dev \
        libxkbcommon-dev \
        libxkbcommon-x11-dev

    - name: Install CMake
      uses: jwlawson/actions-setup-cmake@v2

    # due to path length limitations on windows, the vcpkg path must be as short
    # as possible, otherwise the build of dependencies (especially qt) might fail
    - name: Set VCPKG_ROOT Environment Variable (Windows)
      if: runner.os == 'Windows'
      run: |
        $drive = Split-Path -Path ${{ github.workspace }} -Qualifier
        echo "VCPKG_ROOT=${drive}/vcpkg" >> $env:GITHUB_ENV

    # these limitations do not exist on linux
    - name: Set VCPKG_ROOT Environment Variable (Linux)
      if: runner.os == 'Linux'
      run: echo "VCPKG_ROOT=${{ github.workspace }}/vcpkg" >> $GITHUB_ENV

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: 6f1ddd6b6878e7e66fcc35c65ba1d8feec2e01f8
        vcpkgDirectory: ${{ env.VCPKG_ROOT }}
        doNotCache: false
        runVcpkgInstall: false

    - name: Invoke Developer Command Prompt for VS
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1

    - name: CMake Configure, Build and Install
      run: |
        cmake --preset ${{ matrix.preset }}
        cmake --build --preset ${{ matrix.preset }} --target install

    - name: Upload vcpkg logs
      if: failure() && runner.os == 'Windows'
      uses: actions/upload-artifact@v2
      with:
        name: windows-vcpkg-logs
        path: |
          build/${{ matrix.path }}/vcpkg_installed/vcpkg/blds/qt5-base/build-x64-windows-dbg-out.log
          build/${{ matrix.path }}/vcpkg_installed/vcpkg/blds/qt5-base/build-x64-windows-dbg-err.log

    - name: Upload vcpkg logs (Linux)
      if: failure() && runner.os == 'Linux'
      uses: actions/upload-artifact@v2
      with:
        name: linux-vcpkg-logs
        path: |
          ${{ env.VCPKG_ROOT }}/buildtrees/qt5-base/config-x64-linux-dbg-out.log
          ${{ env.VCPKG_ROOT }}/buildtrees/qt5-base/config-x64-linux-dbg-err.log

    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.preset }}
        path: bin/${{ matrix.path }}
